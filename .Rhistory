# Remove Z-Listo's ratings so that they don't appear in our results
yhat_zlisto = yhat_zlisto - replace(z_listo,is.na(z_listo),0)[-1]
yhat_zlisto[,which(colnames(data) == "Dragon.Ball.Z..Captain.Ginyu.Saga")-1]
top_rankings = sort(yhat_zlisto,decreasing = TRUE)
top1 = which(yhat_zlisto == top_rankings[1])
name1 = colnames(data_matrix)[top1]
top2 = which(yhat_zlisto == top_rankings[2])
name2 = colnames(data_matrix)[top2]
top3 = which(yhat_zlisto == top_rankings[3])
name3 = colnames(data_matrix)[top3]
return(list(name1 = name1, top1 = top_rankings[1], name2 = name2, top2 = top_rankings[2], name3 = name3, top3 = top_rankings[3]))
}
result1a = top3(complete_data)
result1a$name1
result1a$name2
result1a$name3
result1a$top1
result1a$top2
result1a$top3
result1b$name1
result1b$name2
result1b$name3
result1b$top1
result1b$top2
result1b$top3
rm(list=ls())
cat("\014")
library(tidyverse)
require(softImpute)
setwd("~/Dropbox (MIT)/AOM/Pset 6")
set.seed(15780)
data  = read.csv("netflix_matrix.csv")
# Part 1
# we will give z_listo an id of 1000000
z_listo = c(1000000, rep(NA, 1701))
z_listo[which(colnames(data) == "NFL..Super.Bowl.XXXIX")] = 1
z_listo[which(colnames(data) == "Scooby.Doo.s.Spookiest.Tales")] = 5
z_listo[which(colnames(data) == "The.Phantom.of.the.Opera..Special.Edition")] = 2
z_listo[which(colnames(data) == "Streetball.Classics..Vol..1")] = 5
z_listo[which(colnames(data) == "Don.t.Try.This.at.Home..The.Steve.O.Video")] = 3
z_listo[which(colnames(data) == "Bullet")] = 4
z_listo[which(colnames(data) == "Futurama..Vol..1")] = 5
z_listo[which(colnames(data) == "Dragon.Ball.Z..Captain.Ginyu.Saga")] = 4
z_listo[which(colnames(data) == "The.Great.Mouse.Detective")] = 1
z_listo[which(colnames(data) == "Batman.Forever")] = 5
data_matrix = rbind(data[,-1], z_listo[-1])
data_matrix = as.matrix(data_matrix)
incomplete_data = as(data_matrix, "Incomplete")
res = softImpute(incomplete_data,rank.max=100,trace=FALSE,type="svd",lambda= 0)
# Complete the matrix
complete_data = complete(data_matrix,res,unscale=FALSE)
top3 = function(complete_data){
yhat_zlisto = tail(complete_data,1)
# Remove Z-Listo's ratings so that they don't appear in our results
yhat_zlisto = yhat_zlisto - replace(z_listo,is.na(z_listo),0)[-1]
yhat_zlisto[,which(colnames(data) == "Dragon.Ball.Z..Captain.Ginyu.Saga")-1]
top_rankings = sort(yhat_zlisto,decreasing = TRUE)
top1 = which(yhat_zlisto == top_rankings[1])
name1 = colnames(data_matrix)[top1]
top2 = which(yhat_zlisto == top_rankings[2])
name2 = colnames(data_matrix)[top2]
top3 = which(yhat_zlisto == top_rankings[3])
name3 = colnames(data_matrix)[top3]
return(list(name1 = name1, top1 = top_rankings[1], name2 = name2, top2 = top_rankings[2], name3 = name3, top3 = top_rankings[3]))
}
result1a = top3(complete_data)
result1a$name1
result1a$name1
result1a$name2
result1a$name3
result1a$top1
result1a$top2
result1a$top3
result1a$top1
result1a$top2
result1a$top3
result1a$name1
result1a$name2
result1a$name3
incomplete_data_scaled = biScale(incomplete_data,col.scale=FALSE,row.scale=FALSE, maxit = 100)
res2 = softImpute(incomplete_data_scaled,rank.max=100,trace=FALSE,type="svd",lambda= 0)
complete_data2 = complete(incomplete_data_scaled,res2,unscale=TRUE)
result1b = top3(complete_data2)
result1b$name1
result1b$name2
result1b$name3
result1b$top1
result1b$top2
result1b$top3
result1b$name1
result1b$name2
result1b$name3
result1b$top1
result1b$top2
result1b$top3
result1a$name1
result1a$name2
result1a$name3
result1a$top1
result1a$top2
result1a$top3
r1 = c(1,-1,1,-1)
r2 = c(-1,1,-1,1)
r3 = c(1,-1,1,1)
r4 = c(-1,1,-1,-1)
r5 = c(NA, -1,1,-1)
songs = t(matrix(c(r1, r2, r3,r4), nrow=4,  ncol=4))
songs
songs = t(matrix(c(r1, r2, r3, r4, r5), nrow=4,  ncol=4))
songs
songs = t(matrix(c(r1, r2, r3, r4, r5), nrow=5,  ncol=4))
songs
songs = t(matrix(c(r1, r2, r3, r4, r5), nrow=4,  ncol=5))
songs
dimnames(somgs) = list(
c( "User 1", "User 2","User 3","User 4","User 5"),
c("Hotline Bling", "Bad Blood", "Work","Bohemian Rhapsody"))
songs = matrix(c(r1, r2, r3, r4, r5), nrow=5,  ncol=4)
songs
dimnames(somgs) = list(
c( "User 1", "User 2","User 3","User 4","User 5"),
c("Hotline Bling", "Bad Blood", "Work","Bohemian Rhapsody"))
dimnames(songs) = list(
c( "User 1", "User 2","User 3","User 4","User 5"),
c("Hotline Bling", "Bad Blood", "Work","Bohemian Rhapsody"))
songs
songs = matrix(c(r1, r2, r3, r4, r5), nrow=4,  ncol=5)
dimnames(songs) = list(
c( "User 1", "User 2","User 3","User 4","User 5"),
c("Hotline Bling", "Bad Blood", "Work","Bohemian Rhapsody"))
c(r1, r2, r3, r4, r5)
songs = matrix(c(r1, r2, r3, r4, r5), nrow=4,  ncol=5)
songs
songs = matrix(c(r1, r2, r3, r4, r5), nrow=5,  ncol=4)
songs
r1 = c(1,-1,1,-1)
r2 = c(-1,1,-1,1)
r3 = c(1,-1,1,1)
r4 = c(-1,1,-1,-1)
r5 = c(NA, -1,1,-1)
songs = matrix(c(r1, r2, r3, r4, r5), nrow=5,  ncol=4)
rbind(r1,r2)
rbind(r1,r2) %>% rbind(.,r3)
songs = rbind(r1,r2) %>% rbind(.,r3) %>% rbind(.,r4) %>% rbind(.,r5)
songs
dimnames(songs) = list(
c( "User 1", "User 2","User 3","User 4","User 5"),
c("Hotline Bling", "Bad Blood", "Work","Bohemian Rhapsody"))
songs
songs = rbind(r1,r2) %>% rbind(.,r3) %>% rbind(.,r4) %>% rbind(.,r5) %>% dimnames() = list(
c( "User 1", "User 2","User 3","User 4","User 5"),
c("Hotline Bling", "Bad Blood", "Work","Bohemian Rhapsody"))
songs = rbind(r1,r2) %>% rbind(.,r3) %>% rbind(.,r4) %>% rbind(.,r5)
dimnames(songs) = list(
c( "User 1", "User 2","User 3","User 4","User 5"),
c("Hotline Bling", "Bad Blood", "Work","Bohemian Rhapsody"))
songs
cosine_similarity <- function(x, y){
return(sum(x*y) / (sqrt(sum(x*x)) * sqrt(sum(y*y))))
}
for (i in 1:(nrow(songs)-1)){
print(cosine_similarity(r5,songs[i,]))
}
c(1,2,3)[1:]
c(1,2,3)[1,]
c(1,2,3)[1]
c(1,2,3)[:1]
c(1,2,3)[(2:3)]
for (i in 1:(nrow(songs)-1)){
print(cosine_similarity(r5[1],songs[i,(2:)]))
for (i in 1:(nrow(songs)-1)){
print(cosine_similarity(r5[2:],songs[i,(2:)]))
print(cosine_similarity(r5[2:],songs[i,2:]))
for (i in 1:(nrow(songs)-1)){
print(cosine_similarity(r5,songs[i]))
}
print(cosine_similarity(r5[2:],songs[i,2:]))
songs
songs[1,]
songs[1,2:]
songs.matrix[1,2:]
songs[,1]
songs[1,2]
songs[2]
songs[2:]
songs[(2:)]
songs
songs[-1]
songs[,-1]
songs[1,-1]
r5
r5[-1]
for (i in 1:(nrow(songs)-1)){
print(cosine_similarity(r5[-1],songs[i,-1]))
}
for (i in 1:(nrow(songs)-1)){
user_similarity[i] = cosine_similarity(r5[-1],songs[i,-1])
}
user_similarity = rep(0,4)
for (i in 1:(nrow(songs)-1)){
user_similarity[i] = cosine_similarity(r5[-1],songs[i,-1])
}
user_similarity
knitr::kable(data.frame(c( "User 1", "User 2","User 3","User 4","User 5"), user_similarity),
caption = "Cosine similarity with user 6 by user")
knitr::kable(data.frame(c( "User 1", "User 2","User 3","User 4"), user_similarity),
caption = "Cosine similarity with user 6 by user")
df = data.frame(c( "User 1", "User 2","User 3","User 4"),user_similarity)
df
colnames(df) = c("User", "Cosine similarity")
df
knitr::kable(df, caption = "Cosine similarity with user 6 by user")
user_similarity
songs
songs[-1,1]
songs[1:3,1]
songs[1:4,1]
?ifelse
?sapply
Suv = ifelse(user_similarity<0,0,user_similarity)
Suv
user_similarity
songs[1:4,1]
yhat_user6 = Suv * songs[1:4,1]
yhat_user6
yhat_user6 = sum(Suv * songs[1:4,1])/sum(Suv)
yhat_user6
sum(sum(Suv * songs[1:4,1]))
songs[1:4,1]
df2 %>%
ggplot() +
aes(x = cluster, y = PF) +
geom_boxplot() +
theme_bw()
df2 %>%
ggplot() +
aes(x = cluster, y = PF) +
geom_boxplot() +
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
library(reshape2)
setwd("~/Dropbox (Personal)/MIT/Fall 2017/Analytics of Operations Management/AOM/Pset 7")
anime = read.csv("anime_likes.csv")
set.seed(15774)
number_arms  = ncol(anime)
horizon = nrow(anime)
bandit_algo <- function(horizon, number_arms, algo_name, reward_pulls ,eps=0){
#Initialize number of times each arm has been pulled to 0
num_pulls = rep(0,number_arms)
#Initialize mean reward of each arm as 0.5
#number of columns is horizon+1 as column t indicates the estimate at the beginning of round t
mean_est =  matrix( rep(0.5,number_arms*(horizon+1)), nrow = number_arms, ncol=horizon+1)
#Initialize sum of reward obtained by each arm as 0, the arm pulled
#and the reward obtained at each step as NA
reward_sum = rep(0, number_arms)
pulled_arm = rep(NA, horizon)
reward = rep(NA, horizon)
#This matrix stores the a and b parameters of the beta distribution required for Thompson samplings
rew_dist = matrix(rep(1, 2*number_arms), nrow = number_arms, ncol= 2)
rew_dist_history = list(rew_dist)
for(t in 1:horizon){
#pull arm as specified by the algorithm
if(algo_name=='eps_greedy'){
pulled_arm[t] = epsilon_greedy_pull(eps, mean_est[,t], number_arms)}
else if(algo_name=='dec_eps_greedy'){
pulled_arm[t] = dec_epsilon_greedy_pull(eps, mean_est[,t], number_arms,t)}
else if(algo_name=='ucb'){
#Initialize UCB algorithm by pulling each arm once
if(t<= number_arms){pulled_arm[t] = t}
else{pulled_arm[t] = ucb_pull(mean_est[,t], t, num_pulls) }}
else if(algo_name=='thompson_sampling'){
pulled_arm[t] = thm_pull(rew_dist, number_arms)
}
reward[t] =  anime[t,pulled_arm[t]]
rew_dist[pulled_arm[t],] = rew_dist[pulled_arm[t],] + c(reward[t], 1 - reward[t])
rew_dist_history[[t+1]] = rew_dist
num_pulls[pulled_arm[t]] = num_pulls[pulled_arm[t]] + 1
reward_sum[pulled_arm[t]] = reward_sum[pulled_arm[t]] + reward[t]
mean_est[,t+1] = mean_est[,t]
if(algo_name=='thompson_sampling'){
mean_est[pulled_arm[t], t+1] =   rew_dist[pulled_arm[t],1]/(rew_dist[pulled_arm[t],1]+rew_dist[pulled_arm[t],2]) }
else{
mean_est[pulled_arm[t], t+1] = reward_sum[pulled_arm[t]]/num_pulls[pulled_arm[t]]}}
return(list("mean_est" = mean_est, "pulled_arm" = pulled_arm, "reward" = reward, "rew_dist_hist" = rew_dist_history))
}
ucb_pull <- function(mean_est, t, num_pulls){
#Calculate upper confidence bound
uc_bound = mean_est + sqrt(2*log(t)/num_pulls)
#Pull the arm which has the maximum UCB
pulled_arm = which.max(uc_bound)
return(pulled_arm)
}
anime_ucb = bandit_algo(horizon, number_arms, 'ucb', anime)
mean_est_end = anime_ucb$mean_est[,ncol(anime_ucb$mean_est)]
best_arm = which(mean_est_end == max(mean_est_end))
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
anime_ucb$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1)) +
geom_line() +
theme_bw() +
labs(x = "Round", y = "Mean", title = "Mean reward by arm over time") +
scale_color_manual(labels=c("1", "2"), values = gg_color_hue(2), name = "Arm")
anime_ucb$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1)) +
geom_line(linetype = factor(Var1)) +
theme_bw() +
labs(x = "Round", y = "Mean", title = "Mean reward by arm over time") +
scale_color_manual(labels=c("1", "2"), values = gg_color_hue(2), name = "Arm")
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
anime_ucb$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1)) +
geom_line() +
theme_bw() +
labs(x = "Round", y = "Mean", title = "Mean reward by arm over time") +
scale_color_manual(labels=c("1", "2"), values = gg_color_hue(2), name = "Arm")
anime_ucb$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1),linetype = factor(Var1)) +
geom_line() +
theme_bw() +
labs(x = "Round", y = "Mean", title = "Mean reward by arm over time") +
scale_color_manual(labels=c("1", "2"), values = gg_color_hue(2), name = "Arm")
anime_ucb$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1),linetype = factor(Var1) as Arm) +
anime_ucb$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1),linetype = factor(Var1) as "Arm") +
anime_ucb$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1),linetype = factor(Var1)) +
geom_line() +
theme_bw() +
labs(x = "Round", y = "Mean", title = "Mean reward by arm over time") +
scale_color_manual(labels=c("1", "2"), values = gg_color_hue(2), name = "Arm")
anime_ucb$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1),linetype = factor(Var1)) +
geom_line() +
theme_bw() +
labs(x = "Round", y = "Mean", title = "Mean reward by arm over time") +
scale_color_manual(labels=c("1", "2"), values = gg_color_hue(2), name = "Arm") +
scale_linetype_manual(labels=c("1", "2"), name = "Arm")
anime_ucb$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1),linetype = factor(Var1)) +
geom_line() +
theme_bw() +
labs(x = "Round", y = "Mean", title = "Mean reward by arm over time") +
scale_color_manual(labels=c("1", "2"), values = gg_color_hue(2), name = "Arm") +
scale_linetype_manual(labels=c("1", "2"), values = c('Solid','Dashed'), name = "Arm")
anime_ucb$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1),linetype = factor(Var1)) +
geom_line() +
theme_bw() +
labs(x = "Round", y = "Mean", title = "Mean reward by arm over time") +
scale_color_manual(labels=c("1", "2"), values = gg_color_hue(2), name = "Arm") +
scale_linetype_manual(labels=c("1", "2"), values = c(2,4), name = "Arm")
anime_ucb$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1),linetype = factor(Var1)) +
geom_line() +
theme_bw() +
labs(x = "Round", y = "Mean", title = "Mean reward by arm over time") +
scale_color_manual(labels=c("1", "2"), values = gg_color_hue(2), name = "Arm") +
scale_linetype_manual(labels=c("1", "2"), values = c(1,2), name = "Arm")
ggplot() +
aes(x = seq(1,300), y = anime_ucb$pulled_arm) +
geom_point() +
labs(x="Round", y="Arm", title="Arm pulled over time") +
theme_bw() +
ylim(1,2)
crap_pulls_ucb = ((1 - sum(anime_ucb$pulled_arm == best_arm)/horizon) * 100) %>% round(.,2)
set.seed(15774)
dec_epsilon_greedy_pull <- function(eps, mean_est, number_arms,t){
#Generate a bernoulli random variable with mean eps/t
explore = rbinom(1,1,eps/sqrt(t))
#Explore if the above variable is 1 else pull BAE
if(explore==1){
pulled_arm = sample.int(number_arms, size=1)
}else{
best_arm = which.max(mean_est)
pulled_arm = best_arm
}
return(pulled_arm)
}
eps = 0.9
anime_dec_eps_greedy = bandit_algo( horizon, number_arms, 'dec_eps_greedy', anime, eps)
mean_est_end_dec_eps_greedy = anime_dec_eps_greedy$mean_est[,ncol(anime_dec_eps_greedy$mean_est)]
best_arm_dec_eps_greedy = which(mean_est_end_dec_eps_greedy == max(mean_est_end_dec_eps_greedy))
anime_dec_eps_greedy$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1),linetype = factor(Var1)) +
geom_line() +
theme_bw() +
labs(x = "Round", y = "Mean", title = "Mean reward by arm over time") +
scale_color_manual(labels=c("1", "2"), values = gg_color_hue(2), name = "Arm") +
scale_linetype_manual(labels=c("1", "2"), values = c(1,2), name = "Arm")
library(tidyverse)
library(softImpute)
setwd("~/Dropbox (Personal)/MIT/Fall 2017/Analytics of Operations Management/Project/AOM-Project")
convert_pos = function(x){
if (x == 'C'){
return(5)
} else if (x == 'C-PF'){
return(4.75)
} else if (x == 'C-SF'){
return(4)
} else if (x == 'PF'){
return(4)
} else if (x == 'PF-C'){
return(4.25)
} else if (x == 'PF-SF'){
return(3.75)
} else if (x == 'PG'){
return(1)
} else if (x == 'PG-SF'){
return(2)
} else if (x == 'PG-SG'){
return(1.25)
} else if (x == 'SF'){
return(3)
} else if (x == 'SF-PF'){
return(3.25)
} else if (x == 'SF-SG'){
return(2.75)
} else if (x == 'SG'){
return(2)
} else if (x == 'SG-PF'){
return(3)
} else if (x == 'SG-PG'){
return(1.75)
} else if (x == 'SG-SF'){
return(2.25)
}
}
df = read.csv("Combined Data.csv")
df2 = df %>%
mutate(PosNum = sapply(df$Pos, convert_pos)) %>%
filter(MP >= 500)
df_cluster = df2 %>%
select(-Player, -MP, -Year, -X,-Rk,-Pos, -PosNum, -Age,-Tm,-G,-GS, -X3P., -FG., -FG, -FGA,
-FT., -PTS, -X3P, -X2P, -TRB, -FT) %>%
biScale(.,row.center = FALSE, row.scale = FALSE)
cor(df_cluster)
scree_plot = function(x){
result = rep(0,x)
for (i in 1:x){
clus = kmeans(df_cluster,i)
result[i] = clus$tot.withinss
}
ggplot() +
aes(x = seq(1:x), y = result) +
geom_line() +
theme_bw() +
labs(x = "Number of clusters", y = "Within cluster SS")
}
scree_plot(10)
clusters = kmeans(df_cluster,4)
df2 = df2 %>%
mutate(cluster = factor(clusters$cluster))
df2 %>%
filter(Year == 2016, MP > 2000) %>%
select(Player, PTS, MP, cluster) %>%
arrange_(~ desc(PTS)) %>%
group_by_(~ cluster) %>%
do(head(., n = 5))
df2 %>% group_by(cluster) %>%
summarise(mean_pts = mean(PTS), mean_ast = mean(AST), mean_trb = mean(TRB))
library(cluster)
df2 %>%
ggplot() +
aes(x = cluster, y = PosNum) +
geom_boxplot() +
theme_bw()
df2 %>%
ggplot() +
aes(x = X3PA, y = X2PA, color = cluster) +
geom_point() +
theme_bw()
df2 %>%
ggplot() +
aes(x = cluster, y = TRB) +
geom_boxplot() +
theme_bw()
write_csv(dfw,"/Users/thomaslittrell/Dropbox (MIT)/AOM Project/Data")
write_csv(df2,"/Users/thomaslittrell/Dropbox (MIT)/AOM Project/Data")
write_csv(df2,"/Users/thomaslittrell/Dropbox (MIT)/AOM Project/Data/clustered_data.csv")
