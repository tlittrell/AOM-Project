library(glmnet)
set.seed(1)
x=matrix(rnorm(100*20),100,10)
y=rnorm(100)
fit1=glmnet(x,y)
coef(fit1,s=0.01)
rnorm(10)
summary(iris)
B = [1 1 0 0; 1 0 0 0]
B = c[1 1 0 0; 1 0 0 0]
B = [1, 1, 0, 0; 1, 0, 0, 0]
B <- [1, 1, 0, 0; 1, 0, 0, 0]
[1, 1, 0, 0; 1, 0, 0, 0]
c[1, 1, 0, 0; 1, 0, 0, 0]
[1, 1, 0, 0, 1, 0, 0, 0]
(1, 1, 0, 0, 1, 0, 0, 0)
c(1, 1, 0, 0, 1, 0, 0, 0)
c(1, 1, 0, 0; 1, 0, 0, 0)
0.5*(600*(2.5/(1+2.5))) + 0.5*(600*(0.1/(1+0.1)))
0.5*(600*(2.5/(1+2.5))) + 0.5*(600*(0.01/(1+0.01)))
0.5*(600*(2.5/(1+2.1+2.5)) + 500*(2.1/(1+2.1+2.5))) + 0.5*(600*(0.01/(1+0.01+0.01)) + 500*(0.01/(1+0.01+0.01)))
0.5*(600*(2.5/(1+2.1+2.5+0.1)) + 500*(2.1/(1+2.1+2.5+0.1)) + 499*(0.1/(1+2.1+2.5+0.1))) + 0.5*(600*(0.01/(1+0.01+0.01+2.2)) + 500*(0.01/(1+0.01+0.01+2.2)) + 499*(2.2/(1+0.01+0.01+2.2)))
0.5*(600*(2.5/(1+2.1+2.5+0.1)) + 500*(2.1/(1+2.1+2.5+0.1)) + 499*(0.1/(1+2.1+2.5+0.1)) + 400*(0.1/(1+2.1+2.5+0.1+0.1))) + 0.5*(600*(0.01/(1+0.01+0.01+2.2)) + 500*(0.01/(1+0.01+0.01+2.2)) + 499*(2.2/(1+0.01+0.01+2.2)) + 400*(2/(1+0.01+0.01+2.2+2)))
480.3119-453.86
(5.6)^-1*(2.5*600 + 2.1*500)
(5.7)^-1*(2.5*600 + 2.1*500+0.1*499)
(5.8)^-1*(2.5*600 + 2.1*500+0.1*499+0.1*400)
(1.01)^-1*(0.01*600)
(1.02)^-1*(0.01*600 + 0.01*500)
(3.22)^-1*(0.01*600 + 0.01*500 + 2.2*499)
(5.22)^-1*(0.01*600 + 0.01*500 + 2.2*499 + 2*400)
0.5*(600*(2.5/(1+2.1+2.5+0.1)) + 500*(2.1/(1+2.1+2.5+0.1)) + 499*(0.1/(1+2.1+2.5+0.1)) + 400*(0.1/(1+2.1+2.5+0.1+0.1))) + 0.5*(600*(0.01/(1+0.01+0.01+2.2+2)) + 500*(0.01/(1+0.01+0.01+2.2+2)) + 499*(2.2/(1+0.01+0.01+2.2+2)) + 400*(2/(5.22)))
0.5*(600*(2.5/(1+2.1+2.5+0.1)) + 500*(2.1/(1+2.1+2.5+0.1)) + 499*(0.1/(1+2.1+2.5+0.1)) + 400*(0.1/(1+2.1+2.5+0.1+0.1))) + 0.5*(600*(0.01/(1+0.01+0.01+2.2+2)) + 500*(0.01/5.22) + 499*(2.2/5.22) + 400*(2/5.22))
0.5*(600*(2.5/(1+2.1+2.5+0.1+0.1)) + 500*(2.1/(1+2.1+2.5+0.1+0.1)) + 499*(0.1/(1+2.1+2.5+0.1+0.1)) + 400*(0.1/(1+2.1+2.5+0.1+0.1+0.1))) + 0.5*(600*(0.01/5.22) + 500*(0.01/5.22) + 499*(2.2/5.22) + 400*(2/5.22))
(1+2.5)^-1*(2.5*600)
(1+2.5+2.2)^-1*(2.5*600 + 2.2*500)
(1+2.5+2.1)^-1*(2.5*600 + 2.1*500)
(1+2.5)^-1*(2.5*600)
(1+2.5+2.1)^-1*(2.5*600 + 2.1*500)
(1+2.5+2.1+0.1)^-1*(2.5*600 + 2.1*500 + 0.1*499)
(1+2.5+2.1+0.1+0.1)^-1*(2.5*600 + 2.1*500 + 0.1*499 + 0.1*400)
(1+0.01)^-1*(0.01*600)
(1+0.01+0.01)^-1*(0.01*600 + 0.01*500)
(1+0.01+0.01+2.2)^-1*(0.01*600 + 0.01*500 + 2.2*499)
(1+0.01+0.01+2.2+2)^-1*(0.01*600 + 0.01*500 + 2.2*499 + 2*400)
((1+0.01+0.01+2.2+2)^-1*(0.01*600 + 0.01*500 + 2.2*499 + 2*400) + (1+2.5+2.1+0.1+0.1)^-1*(2.5*600 + 2.1*500 + 0.1*499 + 0.1*400))/2
((1+0.01+0.01+2.2+2)^-1*(0.01*600 + 0.01*500 + 2.2*499 + 2*400) + (1+2.5+2.1+0.1)^-1*(2.5*600 + 2.1*500 + 0.1*499))/2
((1+2.5+2.1+0.1)^-1*(2.5*600 + 2.1*500 + 0.1*499) + (1+0.01+0.01+2.2)^-1*(0.01*600 + 0.01*500 + 2.2*499))/2
( (1+2.5+2.1)^-1*(2.5*600 + 2.1*500) + (1+0.01+0.01)^-1*(0.01*600 + 0.01*500))/2
(1+2.5)^-1*(2.5*600)/2 + (1+0.01)^-1*(0.01*600)/2
(1+2.5)^-1*(2.5*600)
(1+2.5+2.1)^-1*(2.5*600 + 2.1*500)
(1+2.5+2.1+2.2)^-1*(2.5*600 + 2.1*500 + 2.2*499)
(1+2.5+2.1+2.2+2)^-1*(2.5*600 + 2.1*500 + 2.2*499 + 2*400)
467.6667 - 410.4128
(365.6705 + 456.1228)/2
abs(410.4128/410.8967-1)*100
((410.4128/410.8967)^-1-1)*100
(1+2.5)^-1*(2.5*600)
(1+2.5+2.1)^-1*(2.5*600+2.1*500)
(1+2.5+2.1+2.2)^-1*(2.5*600+2.1*500+2.2*499)
(1+2.5+2.1+2.2+2)^-1*(2.5*600+2.1*500+2.2*499+2*800)
(1+2.5+2.1+2.2+2)^-1*(2.5*600+2.1*500+2.2*499+2*400)
(1+2.5)^-1*(2.5*600)
(1+2.5+2.1)^-1*(2.5*600+2.1*500)
(1+2.5+2.1+2.2)^-1*(2.5*600+2.1*500+2.2*499)
(1+2.5+2.1+2.2+2)^-1*(2.5*600+2.1*500+2.2*499+2*400)
(1+2.5)^-1*(2.5*600)(1/2) + (1+0.01)^-1*(0.01*600)
(1+2.5)^-1*(2.5*600)*(1/2) + (1+0.01)^-1*(0.01*600)*(1/2)
(1+2.5+2.1)^-1*(2.5*600+2.1*500)*(1/2) + (1+0.01+0.01)^-1*(0.01*600+0.01*500)*(1/2)
(1+2.5+2.1+0.1)^-1*(2.5*600+2.1*500+0.1*499)*(1/2) + (1+0.01+0.01+2.2)^-1*(0.01*600+0.01*500+2.2*499)*(1/2)
(1+2.5+2.1+0.1+0.1)^-1*(2.5*600+2.1*500+0.1*499+0.1*400)*(1/2) + (1+0.01+0.01+2.2+2)^-1*(0.01*600+0.01*500+2.2*499+2*400)*(1/2)
467.6667 - 410.4128
(1+2.5)^-1*(2.5*600)
(1+0.01)^-1*(0.01*600)
(1+2.5+2.1)^-1*(2.5*600+2.1*500)
(1+0.01+0.01)^-1*(0.01*600+0.01*500)
(1+2.5+2.1+0.1)^-1*(2.5*600+2.1*500+0.1*499)
(1+0.01+0.01+2.2)^-1*(0.01*600+0.01*500+2.2*499)
(1+2.5+2.1+0.1+0.1)^-1*(2.5*600+2.1*500+0.1*499+0.1*400)
(1+0.01+0.01+2.2+2)^-1*(0.01*600+0.01*500+2.2*499+2*400)
(456.1228+365.6705)/2
(((456.1228+365.6705)/2)/410.4128 - 1)*100
K  = 100
p_high = 150
mean_high = 56
std_high = 23
p_low= 100
mean_low = 200
std_low = 20
print(K*p_low)
prot_level = qnorm(1-p_low/p_high,
mean = mu_high,
sd = std_high)
p_high = 150
mu_high = 56
std_high = 23
p_low= 100
mu_low = 200
std_low = 20
print(K*p_low)
prot_level = qnorm(1-p_low/p_high,
mean = mu_high,
sd = std_high)
prot_level = round(prot_level)
print("Protected Seats: ",prot_level)
print("Protected Seats: prot_level")
print("Protected Seats: %prot_level")
print("Protected Seats: %d",prot_level)
sprintf("Protected Seats: %d",prot_level)
prot_level = round(prot_level)
L = K - prot_level
sprintf("Protected Seats: %d",prot_level)
sprintf("Booking Limit: %d",L)
prot_level = round(prot_level)
L_opt = K - prot_level
sprintf("Protected Seats: %d",prot_level)
sprintf("Booking Limit: %d",L_opt)
ExpRev <- function(p_high, p_low, K, L, mu, std)
{  #function to calculate the revenue with the specified prices, booking limit
#and normal demand distribution with given mean mu and stddev std
#expected revenue = p2*L + p1*E[D*1{D <= K-L} + (K-L)*1{D > K-L}]
n = 10^6 #number of trials in the Monte-Carlo simulation
D = rnorm(n, mean=mean, sd = stddev) #generate random demand
R = p_low*L + p_high*mean(D*(D <= K-L) + (K-L)*(D > K-L))
return(R)
}
opt_rev  = ExpRev(p_high, p_low, K, L_opt, mu_high, std_high)
ExpRev <- function(p_high, p_low, K, L, mu, std)
{  #function to calculate the revenue with the specified prices, booking limit
#and normal demand distribution with given mean mu and stddev std
#expected revenue = p2*L + p1*E[D*1{D <= K-L} + (K-L)*1{D > K-L}]
n = 10^6 #number of trials in the Monte-Carlo simulation
D = rnorm(n, mean=mu, sd = std) #generate random demand
R = p_low*L + p_high*mean(D*(D <= K-L) + (K-L)*(D > K-L))
return(R)
}
opt_rev  = ExpRev(p_high, p_low, K, L_opt, mu_high, std_high)
print("Expected Revenue %d",opt_rev)
print("Expected Revenue %e",opt_rev)
opt_rev
print("Expected Revenue %0.2f",opt_rev)
print("Expected Revenue %0.2f",1)
print("Expected Revenue %d",1)
sprintf("Expected Revenue %d",1)
sprintf("Expected Revenue %d",opt_rev)
sprintf("Expected Revenue %f",opt_rev)
sprintf("Expected Revenue %0.2f",opt_rev)
naiveRev = K*p_low
sprintf("Naive Revenue: %0.2f", naiveRev)
sprintf("Naive Revenue: $%0.2f", naiveRev)
opt_rev  = ExpRev(p_high, p_low, K, L_opt, mu_high, std_high)
sprintf("Expected Revenue $%0.2f",opt_rev)
PercInc = 100*abs(opt_rev/naiveRev-1)
sprintf("Percent Increase %0.2f",PercInc)
sprintf("Percent Increase %0.2f%",PercInc)
sprintf("Percent Increase %0.2f%%",PercInc)
extraRev = opt_rev - naiveRev
sprintf("Extra Revenue: $%0.2f",extraRev)
K  = 100
p_high = 150
mu_high = 56
std_high = 23
p_low= 100
mu_low = 200
std_low = 20
naiveRev = K*p_low
sprintf("Naive Revenue: $%0.2f", naiveRev)
prot_level = qnorm(1-p_low/p_high,
mean = mu_high,
sd = std_high)
prot_level = round(prot_level)
L_opt = K - prot_level
sprintf("Protected Seats: %d",prot_level)
sprintf("Booking Limit: %d",L_opt)
ExpRev <- function(p_high, p_low, K, L, mu, std)
{  #function to calculate the revenue with the specified prices, booking limit
#and normal demand distribution with given mean mu and stddev std
#expected revenue = p2*L + p1*E[D*1{D <= K-L} + (K-L)*1{D > K-L}]
n = 10^6 #number of trials in the Monte-Carlo simulation
D = rnorm(n, mean=mu, sd = std) #generate random demand
R = p_low*L + p_high*mean(D*(D <= K-L) + (K-L)*(D > K-L))
return(R)
}
opt_rev  = ExpRev(p_high, p_low, K, L_opt, mu_high, std_high)
sprintf("Expected Revenue $%0.2f",opt_rev)
PercInc = 100*abs(opt_rev/naiveRev-1)
sprintf("Percent Increase %0.2f%%",PercInc)
extraRev = opt_rev - naiveRev
sprintf("Extra Revenue: $%0.2f",extraRev)
install.packages("plotly")
update.packages()
library(plotly)
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
p
library(readxl)
library(tidyverse)
library(stringr)
require(softImpute)
#install.packages("mclust")
library(mclust)
library(gridExtra)
#install.packages("reshape")
library(reshape)
setwd("~/Dropbox (MIT)/AOM Project/Data/All Data")
allData <- read.csv("Combined data.csv")
omit <- c("X", "Rk", "Player", "Pos", "Age", "Tm", "G", "GS", "MP", "Year")
dat <- allData %>%
filter(MP >= 300) %>%
select(-one_of(omit))
Y = dat
Ybi <- biScale(Y,col.scale=FALSE,row.scale=FALSE,trace=TRUE)
res=softImpute(Ybi,rank.max=5,trace=TRUE,type="svd",lambda= 1)
Yhat_c = complete(Y,res,unscale=TRUE)
X <- data.matrix(scale(Yhat_c))
colMeans(X)
apply(X, 2, sd)
kclusts = 5
kmeanobj = kmeans(X, kclusts)
Ynew <- Yhat_c %>%
mutate(Cluster = kmeanobj$cluster)
Ynew %>%
select(Cluster, colnames(Ynew)[1:7]) %>%
melt(id.vars='Cluster') %>%
ggplot() +
aes(x = factor(Cluster), y=value, fill=factor(Cluster)) +
geom_boxplot() +
#  geom_boxplot(outlier.shape = NA) +
facet_wrap(~variable, ncol=4, scales='free') +
theme(legend.position = c(0.87, 0.27))
Ynew %>%
select(Cluster, colnames(Ynew)[8:14]) %>%
melt(id.vars='Cluster') %>%
ggplot() +
aes(x = factor(Cluster), y=value, fill=factor(Cluster)) +
geom_boxplot() +
facet_wrap(~variable, ncol=4, scales='free') +
theme(legend.position = c(0.87, 0.27))
Ynew %>%
select(Cluster, colnames(Ynew)[15:21]) %>%
melt(id.vars='Cluster') %>%
ggplot() +
aes(x = factor(Cluster), y=value, fill=factor(Cluster)) +
geom_boxplot() +
facet_wrap(~variable, ncol=4, scales='free') +
theme(legend.position = c(0.87, 0.27))
ComplSet <- allData %>%
filter(MP >= 300) %>%
mutate(X3P. = Ynew[,6], FT. = Ynew[,12], Cluster = kmeanobj$cluster)
for (ii in 1:kclusts){
curr <- ComplSet[which(kmeanobj$cluster == ii),]
print("------------------------CLUSTER-----------------------------")
print(summary(curr))
}
# Player Search
players = c("LeBron", "Kobe", "Stephen Curry",
"Durant", "Chris Paul", "Westbrook",
"Kawhi", "Harden", "Anthony Davis",
"Paul George", "Blake Griffin",
"Carmelo")
for (p in players){
info <- ComplSet %>%
filter(grepl(p,Player)) %>%
select(Player, Pos, Tm, Year, Cluster)
print(info)
}
setwd("~/Documents/GitHub/AOM-Project")
write.csv(Ynew, file = "TimData.csv")
write.csv(ComplSet, file = "TimAllData.csv")
Isomap <- read.csv("Isomap.csv", header = FALSE)
library(plotly)
Isomap <- read.csv("Isomap.csv", header = FALSE)
Isomap <- read.csv("TSNE.csv", header = FALSE)
#Isomap <- read.csv("MDS.csv", header = FALSE)
ComplSet <- read.csv("TimAllData.csv", header = TRUE)
ComplSet <- ComplSet[,2:33]
Isomap <- Isomap %>%
mutate(Cluster = ComplSet$Cluster,
Player = ComplSet$Player,
Year = ComplSet$Year)
colors <- c('#FF3030', '#FFD700',
'#00CD66', '#00BFFF',
'#EE82EE')
c1 <- Isomap %>%
filter(Cluster == 1)
cluster1 = list(
type = 'sphere',
xref ='x', yref='y',
x0=min(c1$V1), y0=min(c1$V2), z0=min(c1$V3),
x1=max(c1$V1), y1=max(c1$V1), z1=max(c1$V3),
opacity=0.25,
line = list(color="#835AF1"),
fillcolor="#835AF1")
updatemenus <- list(
list(
active = -1,
type = 'buttons',
buttons = list(
list(
label = "None",
method = "relayout",
args = list(list(shapes = c()))),
list(
label = "Cluster 1",
method = "relayout",
args = list(list(shapes = list(cluster1, c(), c()))))
)
)
)
Isomap %>%
plot_ly(x = ~V1, y = ~V2, z = ~V3,
color = ~Cluster, colors = colors,
marker = list(opacity = 1,
size = 2.5),
mode = "markers",
hoverinfo='text',
text = ~paste('Player:', Player,
'<br>  Year:', Year,
'<br> Group:', Cluster)) %>%
add_markers() %>%
layout(title = "Highlight Clusters", showlegend = FALSE,
updatemenus = updatemenus)
Ynew %>%
select(Cluster, colnames(Ynew)[1:7]) %>%
melt(id.vars='Cluster') %>%
ggplot() +
aes(x = factor(Cluster), y=value, fill=factor(Cluster)) +
geom_boxplot() +
#  geom_boxplot(outlier.shape = NA) +
facet_wrap(~variable, ncol=4, scales='free') +
theme(legend.position = c(0.87, 0.27))
Ynew %>%
select(Cluster, colnames(Ynew)[1:7]) %>%
melt(id.vars='Cluster') %>%
ggplot() +
aes(x = factor(Cluster), y=value, fill=factor(Cluster)) +
geom_boxplot() +
#  geom_boxplot(outlier.shape = NA) +
facet_wrap(~variable, ncol=4, scales='free') +
theme(legend.position = c(0.87, 0.27))
Ynew %>%
select(Cluster, colnames(Ynew)[8:14]) %>%
melt(id.vars='Cluster') %>%
ggplot() +
aes(x = factor(Cluster), y=value, fill=factor(Cluster)) +
geom_boxplot() +
facet_wrap(~variable, ncol=4, scales='free') +
theme(legend.position = c(0.87, 0.27))
Ynew %>%
select(Cluster, colnames(Ynew)[15:21]) %>%
melt(id.vars='Cluster') %>%
ggplot() +
aes(x = factor(Cluster), y=value, fill=factor(Cluster)) +
geom_boxplot() +
facet_wrap(~variable, ncol=4, scales='free') +
theme(legend.position = c(0.87, 0.27))
Isomap <- read.csv("Isomap.csv", header = FALSE)
#Isomap <- read.csv("TSNE.csv", header = FALSE)
#Isomap <- read.csv("MDS.csv", header = FALSE)
ComplSet <- read.csv("TimAllData.csv", header = TRUE)
ComplSet <- ComplSet[,2:33]
Isomap <- Isomap %>%
mutate(Cluster = ComplSet$Cluster,
Player = ComplSet$Player,
Year = ComplSet$Year)
colors <- c('#FF3030', '#FFD700',
'#00CD66', '#00BFFF',
'#EE82EE')
c1 <- Isomap %>%
filter(Cluster == 1)
cluster1 = list(
type = 'sphere',
xref ='x', yref='y',
x0=min(c1$V1), y0=min(c1$V2), z0=min(c1$V3),
x1=max(c1$V1), y1=max(c1$V1), z1=max(c1$V3),
opacity=0.25,
line = list(color="#835AF1"),
fillcolor="#835AF1")
updatemenus <- list(
list(
active = -1,
type = 'buttons',
buttons = list(
list(
label = "None",
method = "relayout",
args = list(list(shapes = c()))),
list(
label = "Cluster 1",
method = "relayout",
args = list(list(shapes = list(cluster1, c(), c()))))
)
)
)
Isomap %>%
plot_ly(x = ~V1, y = ~V2, z = ~V3,
color = ~Cluster, colors = colors,
marker = list(opacity = 1,
size = 2.5),
mode = "markers",
hoverinfo='text',
text = ~paste('Player:', Player,
'<br>  Year:', Year,
'<br> Group:', Cluster)) %>%
add_markers() %>%
layout(title = "Highlight Clusters", showlegend = FALSE,
updatemenus = updatemenus)
for (ii in 1:kclusts){
curr <- ComplSet[which(kmeanobj$cluster == ii),]
print("------------------------CLUSTER-----------------------------")
print(summary(curr))
}
#Isomap <- read.csv("TSNE.csv", header = FALSE)
Isomap <- read.csv("MDS.csv", header = FALSE)
ComplSet <- read.csv("TimAllData.csv", header = TRUE)
ComplSet <- ComplSet[,2:33]
Isomap <- Isomap %>%
mutate(Cluster = ComplSet$Cluster,
Player = ComplSet$Player,
Year = ComplSet$Year)
colors <- c('#FF3030', '#FFD700',
'#00CD66', '#00BFFF',
'#EE82EE')
c1 <- Isomap %>%
filter(Cluster == 1)
cluster1 = list(
type = 'sphere',
xref ='x', yref='y',
x0=min(c1$V1), y0=min(c1$V2), z0=min(c1$V3),
x1=max(c1$V1), y1=max(c1$V1), z1=max(c1$V3),
opacity=0.25,
line = list(color="#835AF1"),
fillcolor="#835AF1")
updatemenus <- list(
list(
active = -1,
type = 'buttons',
buttons = list(
list(
label = "None",
method = "relayout",
args = list(list(shapes = c()))),
list(
label = "Cluster 1",
method = "relayout",
args = list(list(shapes = list(cluster1, c(), c()))))
)
)
)
Isomap %>%
plot_ly(x = ~V1, y = ~V2, z = ~V3,
color = ~Cluster, colors = colors,
marker = list(opacity = 1,
size = 2.5),
mode = "markers",
hoverinfo='text',
text = ~paste('Player:', Player,
'<br>  Year:', Year,
'<br> Group:', Cluster)) %>%
add_markers() %>%
layout(title = "Highlight Clusters", showlegend = FALSE,
updatemenus = updatemenus)
Isomap <- read.csv("TSNE.csv", header = FALSE)
#Isomap <- read.csv("MDS.csv", header = FALSE)
ComplSet <- read.csv("TimAllData.csv", header = TRUE)
ComplSet <- ComplSet[,2:33]
Isomap <- Isomap %>%
mutate(Cluster = ComplSet$Cluster,
Player = ComplSet$Player,
Year = ComplSet$Year)
colors <- c('#FF3030', '#FFD700',
'#00CD66', '#00BFFF',
'#EE82EE')
c1 <- Isomap %>%
filter(Cluster == 1)
cluster1 = list(
type = 'sphere',
xref ='x', yref='y',
x0=min(c1$V1), y0=min(c1$V2), z0=min(c1$V3),
x1=max(c1$V1), y1=max(c1$V1), z1=max(c1$V3),
opacity=0.25,
line = list(color="#835AF1"),
fillcolor="#835AF1")
updatemenus <- list(
list(
active = -1,
type = 'buttons',
buttons = list(
list(
label = "None",
method = "relayout",
args = list(list(shapes = c()))),
list(
label = "Cluster 1",
method = "relayout",
args = list(list(shapes = list(cluster1, c(), c()))))
)
)
)
Isomap %>%
plot_ly(x = ~V1, y = ~V2, z = ~V3,
color = ~Cluster, colors = colors,
marker = list(opacity = 1,
size = 2.5),
mode = "markers",
hoverinfo='text',
text = ~paste('Player:', Player,
'<br>  Year:', Year,
'<br> Group:', Cluster)) %>%
add_markers() %>%
layout(title = "Highlight Clusters", showlegend = FALSE,
updatemenus = updatemenus)
