theme_bw() +
labs(x = "Round", y = "Mean", title = "Mean reward by arm over time") +
scale_color_manual(labels=c("1", "2"), values = gg_color_hue(2), name = "Arm")
anime_ucb$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1),linetype = factor(Var1)) +
geom_line() +
theme_bw() +
labs(x = "Round", y = "Mean", title = "Mean reward by arm over time") +
scale_color_manual(labels=c("1", "2"), values = gg_color_hue(2), name = "Arm")
anime_ucb$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1),linetype = factor(Var1) as Arm) +
anime_ucb$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1),linetype = factor(Var1) as "Arm") +
anime_ucb$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1),linetype = factor(Var1)) +
geom_line() +
theme_bw() +
labs(x = "Round", y = "Mean", title = "Mean reward by arm over time") +
scale_color_manual(labels=c("1", "2"), values = gg_color_hue(2), name = "Arm")
anime_ucb$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1),linetype = factor(Var1)) +
geom_line() +
theme_bw() +
labs(x = "Round", y = "Mean", title = "Mean reward by arm over time") +
scale_color_manual(labels=c("1", "2"), values = gg_color_hue(2), name = "Arm") +
scale_linetype_manual(labels=c("1", "2"), name = "Arm")
anime_ucb$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1),linetype = factor(Var1)) +
geom_line() +
theme_bw() +
labs(x = "Round", y = "Mean", title = "Mean reward by arm over time") +
scale_color_manual(labels=c("1", "2"), values = gg_color_hue(2), name = "Arm") +
scale_linetype_manual(labels=c("1", "2"), values = c('Solid','Dashed'), name = "Arm")
anime_ucb$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1),linetype = factor(Var1)) +
geom_line() +
theme_bw() +
labs(x = "Round", y = "Mean", title = "Mean reward by arm over time") +
scale_color_manual(labels=c("1", "2"), values = gg_color_hue(2), name = "Arm") +
scale_linetype_manual(labels=c("1", "2"), values = c(2,4), name = "Arm")
anime_ucb$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1),linetype = factor(Var1)) +
geom_line() +
theme_bw() +
labs(x = "Round", y = "Mean", title = "Mean reward by arm over time") +
scale_color_manual(labels=c("1", "2"), values = gg_color_hue(2), name = "Arm") +
scale_linetype_manual(labels=c("1", "2"), values = c(1,2), name = "Arm")
ggplot() +
aes(x = seq(1,300), y = anime_ucb$pulled_arm) +
geom_point() +
labs(x="Round", y="Arm", title="Arm pulled over time") +
theme_bw() +
ylim(1,2)
crap_pulls_ucb = ((1 - sum(anime_ucb$pulled_arm == best_arm)/horizon) * 100) %>% round(.,2)
set.seed(15774)
dec_epsilon_greedy_pull <- function(eps, mean_est, number_arms,t){
#Generate a bernoulli random variable with mean eps/t
explore = rbinom(1,1,eps/sqrt(t))
#Explore if the above variable is 1 else pull BAE
if(explore==1){
pulled_arm = sample.int(number_arms, size=1)
}else{
best_arm = which.max(mean_est)
pulled_arm = best_arm
}
return(pulled_arm)
}
eps = 0.9
anime_dec_eps_greedy = bandit_algo( horizon, number_arms, 'dec_eps_greedy', anime, eps)
mean_est_end_dec_eps_greedy = anime_dec_eps_greedy$mean_est[,ncol(anime_dec_eps_greedy$mean_est)]
best_arm_dec_eps_greedy = which(mean_est_end_dec_eps_greedy == max(mean_est_end_dec_eps_greedy))
anime_dec_eps_greedy$mean_est %>%
melt() %>%
ggplot() +
aes(Var2, value, color = factor(Var1),linetype = factor(Var1)) +
geom_line() +
theme_bw() +
labs(x = "Round", y = "Mean", title = "Mean reward by arm over time") +
scale_color_manual(labels=c("1", "2"), values = gg_color_hue(2), name = "Arm") +
scale_linetype_manual(labels=c("1", "2"), values = c(1,2), name = "Arm")
install.packages("plotly")
midwest
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
library(plotly)
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
p
library(plotly)
library(tidyverse)
install.packages("shinydashboard")
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
library(shiny)
shinyUI(pageWithSidebar(
# Application title
headerPanel("Hello Shiny!"),
# Sidebar with a slider input for number of observations
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 1,
max = 1000,
value = 500)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
))
shinyServer(function(input, output) {
# Expression that generates a plot of the distribution. The expression
# is wrapped in a call to renderPlot to indicate that:
#
#  1) It is "reactive" and therefore should be automatically
#     re-executed when inputs change
#  2) Its output type is a plot
#
output$distPlot <- renderPlot({
# generate an rnorm distribution and plot it
dist <- rnorm(input$obs)
hist(dist)
})
})
library(shiny)
shinyUI(pageWithSidebar(
# Application title
headerPanel("Hello Shiny!"),
# Sidebar with a slider input for number of observations
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 1,
max = 1000,
value = 500)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
))
shinyServer(function(input, output) {
# Expression that generates a plot of the distribution. The expression
# is wrapped in a call to renderPlot to indicate that:
#
#  1) It is "reactive" and therefore should be automatically
#     re-executed when inputs change
#  2) Its output type is a plot
#
output$distPlot <- renderPlot({
# generate an rnorm distribution and plot it
dist <- rnorm(input$obs)
hist(dist)
})
})
runExample("01_hello")
set.seed(144)
library(rpart)
library(tidyverse)
library(softImpute)
set.seed(144)
setwd("~/Dropbox (Personal)/MIT/Fall 2017/Analytics of Operations Management/Project/AOM-Project")
convert_pos = function(x){
if (x == 'C'){
return(5)
} else if (x == 'C-PF'){
return(4.75)
} else if (x == 'C-SF'){
return(4)
} else if (x == 'PF'){
return(4)
} else if (x == 'PF-C'){
return(4.25)
} else if (x == 'PF-SF'){
return(3.75)
} else if (x == 'PG'){
return(1)
} else if (x == 'PG-SF'){
return(2)
} else if (x == 'PG-SG'){
return(1.25)
} else if (x == 'SF'){
return(3)
} else if (x == 'SF-PF'){
return(3.25)
} else if (x == 'SF-SG'){
return(2.75)
} else if (x == 'SG'){
return(2)
} else if (x == 'SG-PF'){
return(3)
} else if (x == 'SG-PG'){
return(1.75)
} else if (x == 'SG-SF'){
return(2.25)
}
}
df = read.csv("Combined Data.csv")
df2 = df %>%
mutate(PosNum = sapply(df$Pos, convert_pos)) %>%
filter(MP >= 500)
df_cluster = df2 %>%
select(-Player, -MP, -Year, -X,-Rk,-Pos, -PosNum, -Age,-Tm,-G,-GS, -X3P., -FG., -FG, -FGA,
-FT., -PTS, -X3P, -X2P, -TRB, -FT) %>%
biScale(.,row.center = FALSE, row.scale = FALSE)
cor(df_cluster)
scree_plot = function(x){
result = rep(0,x)
for (i in 1:x){
clus = kmeans(df_cluster,i)
result[i] = clus$tot.withinss
}
ggplot() +
aes(x = seq(1:x), y = result) +
geom_line() +
theme_bw() +
labs(x = "Number of clusters", y = "Within cluster SS")
}
scree_plot(10)
clusters = kmeans(df_cluster,4)
df2 = df2 %>%
mutate(cluster = factor(clusters$cluster))
df2 %>%
filter(Year == 2016, MP > 2000) %>%
select(Player, PTS, MP, cluster) %>%
arrange_(~ desc(PTS)) %>%
group_by_(~ cluster) %>%
do(head(., n = 5))
df2 %>% group_by(cluster) %>%
summarise(mean_pts = mean(PTS), mean_ast = mean(AST), mean_trb = mean(TRB))
library(cluster)
clusplot(df_cluster, clusters$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
df2 %>%
ggplot() +
aes(x = cluster, y = PosNum) +
geom_boxplot() +
theme_bw()
df2 %>%
ggplot() +
aes(x = cluster, y = PosNum) +
geom_boxplot() +
theme_bw()
df2 %>%
ggplot() +
aes(x = X3PA, y = X2PA, color = cluster) +
geom_point() +
theme_bw()
df2 %>%
ggplot() +
aes(x = cluster, y = TRB) +
geom_boxplot() +
theme_bw()
df2 %>%
ggplot() +
aes(x = cluster, y = AST) +
geom_boxplot() +
theme_bw()
df2 %>%
ggplot() +
aes(x = cluster, y = STL) +
geom_boxplot() +
theme_bw()
df2 %>%
ggplot() +
aes(x = cluster, y = BLK) +
geom_boxplot() +
theme_bw()
df2 %>%
ggplot() +
aes(x = cluster, y = TOV) +
geom_boxplot() +
theme_bw()
df2 %>%
ggplot() +
aes(x = cluster, y = PF) +
geom_boxplot() +
theme_bw()
library(rpart)
library(rpart.plot)
library(caret)
library(dplyr)
library(ggplot2)
library(caTools)
library(dummies)
dfCART = df2 %>%
select(-Player, -MP, -Year, -X,-Rk,-Pos, -PosNum, -Age,-Tm,-G,-GS, -X3P., -FG., -FG, -FGA,
-FT., -PTS, -X3P, -X2P, -TRB, -FT, -Year, -X.1)
library(rpart)
library(rpart.plot)
library(caret)
library(dplyr)
library(ggplot2)
library(caTools)
library(dummies)
dfCART = df2 %>%
select(-Player, -MP, -Year, -X,-Rk,-Pos, -PosNum, -Age,-Tm,-G,-GS, -X3P., -FG., -FG, -FGA,
-FT., -PTS, -X3P, -X2P, -TRB, -FT, -Year, -X.1)
dfCART = df2 %>%
select(-Player, -MP, -Year, -X,-Rk,-Pos, -PosNum, -Age,-Tm,-G,-GS, -X3P., -FG., -FG, -FGA,
-FT., -PTS, -X3P, -X2P, -TRB, -FT, -Year)
View(dfCART)
set.seed(123)
spl = sample.split(dfCART$cluster, SplitRatio = 0.7)
CARTmod = rpart(cluster ~.,
data = dfCART_Train,
method="class",
cp=0.02)
set.seed(123)
spl = sample.split(dfCART$cluster, SplitRatio = 0.7)
dfCART_Train = subset(dfCART, spl==TRUE)
dfCART_Test = subset(dfCART, spl==FALSE)
CARTmod = rpart(cluster ~.,
data = dfCART_Train,
method="class",
cp=0.02)
prp(CARTmod)
rpart.plot(CARTmod, extra = 100)
?prp
CARTmod = rpart(cluster ~.,
data = dfCART_Train,
method="class",
cp=0.02)
library(rpart)
library(rpart.plot)
library(caret)
library(rpart)
library(rpart.plot)
install('rpart.plot')
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
library(caret)
install.packages("caret")
library(caret)
library(dplyr)
library(ggplot2)
library(caTools)
library(dummies)
install.packages("dummies")
library(dummies)
dfCART = df2 %>%
select(-Player, -MP, -Year, -X,-Rk,-Pos, -PosNum, -Age,-Tm,-G,-GS, -X3P., -FG., -FG, -FGA,
-FT., -PTS, -X3P, -X2P, -TRB, -FT, -Year)
set.seed(123)
spl = sample.split(dfCART$cluster, SplitRatio = 0.7)
dfCART_Train = subset(dfCART, spl==TRUE)
dfCART_Test = subset(dfCART, spl==FALSE)
CARTmod = rpart(cluster ~.,
data = dfCART_Train,
method="class",
cp=0.02)
prp(CARTmod)
rpart.plot(CARTmod, extra = 100)
prp(CARTmod)
rpart.plot(CARTmod, extra = 100)
rpart.plot(CARTmod, extra = 100)
df2 %>%
ggplot() +
aes(x = cluster, y = PosNum) +
geom_boxplot() +
theme_bw()
rpart.plot(CARTmod, extra = 100)
PredictCART = predict(CARTmod, newdata=dfCART_Test, type="class")
table(dfCART_Test$cluster, PredictCART)
accuracy = sum(388,465,560,210)/nrow(dfCART_Test)
accuracy
?rpart
CARTmod = rpart(cluster ~.,
data = dfCART_Train,
method="class")
prp(CARTmod)
rpart.plot(CARTmod, extra = 100)
PredictCART = predict(CARTmod, newdata=dfCART_Test, type="class")
table(dfCART_Test$cluster, PredictCART)
accuracy = sum(388,465,560,210)/nrow(dfCART_Test)
accuracy
dfCART_alt <- cbind(df2, dummy(df2$cluster, sep = "_"))
names(dfCART_alt)[35:38] <- c("cluster1","cluster2","cluster3","cluster4")
dfCART_alt <- cbind(df2, dummy(df2$cluster, sep = "_"))
dfCART_alt
names(dfCART_alt)[35:38] <- c("cluster1","cluster2","cluster3","cluster4")
dfCART_1 = dfCART_alt %>%
select(-Player, -MP, -Year, -X,-Rk,-Pos, -PosNum, -Age,-Tm,-G,-GS, -X3P., -FG., -FG, -FGA,
-FT., -PTS, -X3P, -X2P, -TRB, -FT, -Year, -cluster, -cluster2, -cluster3, -cluster4)
dfCART_alt <- cbind(df2, dummy(df2$cluster, sep = "_"))
names(dfCART_alt)[35:38] <- c("cluster1","cluster2","cluster3","cluster4")
View(dfCART_alt)
names(dfCART_alt)[34:37] <- c("cluster1","cluster2","cluster3","cluster4")
dfCART_1 = dfCART_alt %>%
select(-Player, -MP, -Year, -X,-Rk,-Pos, -PosNum, -Age,-Tm,-G,-GS, -X3P., -FG., -FG, -FGA,
-FT., -PTS, -X3P, -X2P, -TRB, -FT, -Year, -cluster, -cluster2, -cluster3, -cluster4)
dfCART_2 = dfCART_alt %>%
select(-Player, -MP, -Year, -X,-Rk,-Pos, -PosNum, -Age,-Tm,-G,-GS, -X3P., -FG., -FG, -FGA,
-FT., -PTS, -X3P, -X2P, -TRB, -FT, -Year, -cluster, -cluster1, -cluster3, -cluster4)
dfCART_3 = dfCART_alt %>%
select(-Player, -MP, -Year, -X,-Rk,-Pos, -PosNum, -Age,-Tm,-G,-GS, -X3P., -FG., -FG, -FGA,
-FT., -PTS, -X3P, -X2P, -TRB, -FT, -Year, -cluster, -cluster2, -cluster1, -cluster4)
dfCART_4 = dfCART_alt %>%
select(-Player, -MP, -Year, -X,-Rk,-Pos, -PosNum, -Age,-Tm,-G,-GS, -X3P., -FG., -FG, -FGA,
-FT., -PTS, -X3P, -X2P, -TRB, -FT, -Year, -cluster, -cluster2, -cluster3, -cluster1)
dfCART_1$cluster1 <- as.factor(dfCART_1$cluster1)
dfCART_2$cluster2 <- as.factor(dfCART_2$cluster2)
dfCART_3$cluster3 <- as.factor(dfCART_3$cluster3)
dfCART_4$cluster4 <- as.factor(dfCART_4$cluster4)
set.seed(123)
spl = sample.split(dfCART_1$cluster1, SplitRatio = 0.7)
dfCART_Train1 = subset(dfCART_1, spl==TRUE)
dfCART_Test1 = subset(dfCART_1, spl==FALSE)
set.seed(123)
spl = sample.split(dfCART_2$cluster2, SplitRatio = 0.7)
dfCART_Train2 = subset(dfCART_2, spl==TRUE)
dfCART_Test2 = subset(dfCART_2, spl==FALSE)
set.seed(123)
spl = sample.split(dfCART_3$cluster3, SplitRatio = 0.7)
dfCART_Train3 = subset(dfCART_3, spl==TRUE)
dfCART_Test3 = subset(dfCART_3, spl==FALSE)
set.seed(123)
spl = sample.split(dfCART_4$cluster4, SplitRatio = 0.7)
dfCART_Train4 = subset(dfCART_4, spl==TRUE)
dfCART_Test4 = subset(dfCART_4, spl==FALSE)
CARTmod_1 = rpart(cluster1 ~.,
data = dfCART_Train1,
method="class",
minbucket=5,
cp=0.02)
CARTmod_2 = rpart(cluster2 ~.,
data = dfCART_Train2,
method="class",
minbucket=5,
cp=0.02)
CARTmod_3 = rpart(cluster3 ~.,
data = dfCART_Train3,
method="class",
minbucket=5,
cp=0.02)
CARTmod_4 = rpart(cluster4 ~.,
data = dfCART_Train4,
method="class",
minbucket=5,
cp=0.02)
PredictCART1 = predict(CARTmod_1, newdata=dfCART_Test1, type="class")
PredictCART2 = predict(CARTmod_2, newdata=dfCART_Test2, type="class")
PredictCART3 = predict(CARTmod_3, newdata=dfCART_Test3, type="class")
PredictCART4 = predict(CARTmod_4, newdata=dfCART_Test4, type="class")
table(dfCART_Test1$cluster1, PredictCART1)
table(dfCART_Test2$cluster2, PredictCART2)
table(dfCART_Test3$cluster3, PredictCART3)
table(dfCART_Test4$cluster4, PredictCART4)
accuracy1 = sum(1492,385)/nrow(dfCART_Test1)
accuracy2 = sum(1453,413)/nrow(dfCART_Test2)
accuracy3 = sum(1241,555)/nrow(dfCART_Test3)
accuracy4 = sum(1584,255)/nrow(dfCART_Test4)
prp(CARTmod_1)
prp(CARTmod_2)
rpart.plot(CARTmod_2, main="Cluster 2", extra = 100)
prp(CARTmod_1)
rpart.plot(CARTmod_1, main="Cluster 1", extra = 100)
prp(CARTmod_2)
rpart.plot(CARTmod_2, main="Cluster 2", extra = 100)
rpart.plot(CARTmod_1, main="Cluster 1", extra = 100)
prp(CARTmod_2)
rpart.plot(CARTmod_2, main="Cluster 2", extra = 100)
prp(CARTmod_3)
rpart.plot(CARTmod_3, main="Cluster 3", extra = 100)
prp(CARTmod_4)
rpart.plot(CARTmod_4, main="Cluster 4", extra = 100)
