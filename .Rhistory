require(softImpute)
setwd("~/Dropbox (MIT)/AOM/Pset 6")
set.seed(15780)
data  = read.csv("netflix_matrix.csv")
# Part 1
# we will give z_listo an id of 1000000
z_listo = c(1000000, rep(NA, 1701))
z_listo[which(colnames(data) == "NFL..Super.Bowl.XXXIX")] = 1
z_listo[which(colnames(data) == "Scooby.Doo.s.Spookiest.Tales")] = 5
z_listo[which(colnames(data) == "The.Phantom.of.the.Opera..Special.Edition")] = 2
z_listo[which(colnames(data) == "Streetball.Classics..Vol..1")] = 5
z_listo[which(colnames(data) == "Don.t.Try.This.at.Home..The.Steve.O.Video")] = 3
z_listo[which(colnames(data) == "Bullet")] = 4
z_listo[which(colnames(data) == "Futurama..Vol..1")] = 5
z_listo[which(colnames(data) == "Dragon.Ball.Z..Captain.Ginyu.Saga")] = 4
z_listo[which(colnames(data) == "The.Great.Mouse.Detective")] = 1
z_listo[which(colnames(data) == "Batman.Forever")] = 5
data_matrix = rbind(data[,-1], z_listo[-1])
data_matrix = as.matrix(data_matrix)
incomplete_data = as(data_matrix, "Incomplete")
incomplete_data_scaled = biScale(incomplete_data,col.scale=FALSE,row.scale=FALSE)
incomplete_data_scaled = biScale(incomplete_data,col.scale=FALSE,row.scale=FALSE, trace=TRUE)
?biScale
incomplete_data_scaled = biScale(incomplete_data,col.scale=FALSE,row.scale=FALSE, maxit = 100, trace=TRUE)
incomplete_data_scaled = biScale(incomplete_data,col.scale=FALSE,row.scale=FALSE, maxit = 100)
res2 = softImpute(incomplete_data_scaled,rank.max=100,trace=FALSE, maxit = 1,type="svd",lambda= 0)
```{r, warning=FALSE}
res = softImpute(incomplete_data,rank.max=100,trace=FALSE, maxit = 1,type="svd",lambda= 0)
res2 = softImpute(incomplete_data_scaled,rank.max=100,trace=FALSE, maxit = 1,type="svd",lambda= 0)
complete_data = complete(data_matrix,res2,unscale=TRUE)
top3 = function(complete_data){
yhat_zlisto = tail(complete_data,1)
# Remove Z-Listo's ratings so that they don't appear in our results
yhat_zlisto = yhat_zlisto - replace(z_listo,is.na(z_listo),0)[-1]
yhat_zlisto[,which(colnames(data) == "Dragon.Ball.Z..Captain.Ginyu.Saga")-1]
top_rankings = sort(yhat_zlisto,decreasing = TRUE)
top1 = which(yhat_zlisto == top_rankings[1])
name1 = colnames(yhat_zlisto)[top1]
top2 = which(yhat_zlisto == top_rankings[2])
name2 = colnames(yhat_zlisto)[top2]
top3 = which(yhat_zlisto == top_rankings[3])
name3 = colnames(yhat_zlisto)[top3]
return(c(name1 = name1, top1 = top1, name2 = name2, top2 = top2, name3 = name3, top3 = top3))
}
temp = top3(complete_data)
temp$name1
print(temp)
print(temp$name1)
print(temp[name1])
print(temp["name1"])
top3 = function(complete_data){
yhat_zlisto = tail(complete_data,1)
# Remove Z-Listo's ratings so that they don't appear in our results
yhat_zlisto = yhat_zlisto - replace(z_listo,is.na(z_listo),0)[-1]
yhat_zlisto[,which(colnames(data) == "Dragon.Ball.Z..Captain.Ginyu.Saga")-1]
top_rankings = sort(yhat_zlisto,decreasing = TRUE)
top1 = which(yhat_zlisto == top_rankings[1])
name1 = colnames(yhat_zlisto)[top1]
top2 = which(yhat_zlisto == top_rankings[2])
name2 = colnames(yhat_zlisto)[top2]
top3 = which(yhat_zlisto == top_rankings[3])
name3 = colnames(yhat_zlisto)[top3]
return(list(name1 = name1, top1 = top1, name2 = name2, top2 = top2, name3 = name3, top3 = top3))
}
temp = top3(complete_data)
print(temp["name1"])
temp$name1
result1a = top3(complete_data)
result1a$top1
complete_data2 = complete(data_matrix,res2,unscale=TRUE)
complete_data2 = complete(data_matrix,res2,unscale=TRUE)
result1b = top3(complete_data2)
result1b$name1
result1b$name2
result1b$name3
result1b$top1
top3 = function(complete_data){
yhat_zlisto = tail(complete_data,1)
# Remove Z-Listo's ratings so that they don't appear in our results
yhat_zlisto = yhat_zlisto - replace(z_listo,is.na(z_listo),0)[-1]
yhat_zlisto[,which(colnames(data) == "Dragon.Ball.Z..Captain.Ginyu.Saga")-1]
top_rankings = sort(yhat_zlisto,decreasing = TRUE)
top1 = which(yhat_zlisto == top_rankings[1])
name1 = colnames(yhat_zlisto)[top1]
top2 = which(yhat_zlisto == top_rankings[2])
name2 = colnames(yhat_zlisto)[top2]
top3 = which(yhat_zlisto == top_rankings[3])
name3 = colnames(yhat_zlisto)[top3]
return(list(name1 = name1, top1 = top_rankings[1], name2 = name2, top2 = top_rankings[2], name3 = name3, top3 = top_rankings[3]))
}
result1b$top1
result1b$top2
result1b$top3
complete_data2 = complete(incomplete_data_scaled,res2,unscale=TRUE)
complete_data2 = complete(incomplete_data_scaled,res2,unscale=TRUE)
result1b = top3(complete_data2)
result1b$name1
result1b$name2
result1b$name3
result1b$top1
result1b$top2
result1b$top3
top3 = function(complete_data){
yhat_zlisto = tail(complete_data,1)
# Remove Z-Listo's ratings so that they don't appear in our results
yhat_zlisto = yhat_zlisto - replace(z_listo,is.na(z_listo),0)[-1]
yhat_zlisto[,which(colnames(data) == "Dragon.Ball.Z..Captain.Ginyu.Saga")-1]
top_rankings = sort(yhat_zlisto,decreasing = TRUE)
top1 = which(yhat_zlisto == top_rankings[1])
name1 = colnames(data_matrix)[top1]
top2 = which(yhat_zlisto == top_rankings[2])
name2 = colnames(data_matrix)[top2]
top3 = which(yhat_zlisto == top_rankings[3])
name3 = colnames(data_matrix)[top3]
return(list(name1 = name1, top1 = top_rankings[1], name2 = name2, top2 = top_rankings[2], name3 = name3, top3 = top_rankings[3]))
}
result1a = top3(complete_data)
result1b = top3(complete_data2)
result1b$name1
result1b$name2
result1b$name3
result1b$top1
result1b$top2
result1b$top3
View(complete_data2)
result1a$name1
result1a$name2
result1a$name3
result1a = top3(complete_data)
result1a$name1
result1a$name2
result1a$name3
result1a$top1
result1a$top2
result1a$top3
complete_data = complete(data_matrix,res,unscale=FALSE)
complete_data = complete(data_matrix,res,unscale=FALSE)
top3 = function(complete_data){
yhat_zlisto = tail(complete_data,1)
# Remove Z-Listo's ratings so that they don't appear in our results
yhat_zlisto = yhat_zlisto - replace(z_listo,is.na(z_listo),0)[-1]
yhat_zlisto[,which(colnames(data) == "Dragon.Ball.Z..Captain.Ginyu.Saga")-1]
top_rankings = sort(yhat_zlisto,decreasing = TRUE)
top1 = which(yhat_zlisto == top_rankings[1])
name1 = colnames(data_matrix)[top1]
top2 = which(yhat_zlisto == top_rankings[2])
name2 = colnames(data_matrix)[top2]
top3 = which(yhat_zlisto == top_rankings[3])
name3 = colnames(data_matrix)[top3]
return(list(name1 = name1, top1 = top_rankings[1], name2 = name2, top2 = top_rankings[2], name3 = name3, top3 = top_rankings[3]))
}
result1a = top3(complete_data)
result1a$name1
result1a$name2
result1a$name3
result1a$top1
result1a$top2
result1a$top3
result1b$name1
result1b$name2
result1b$name3
result1b$top1
result1b$top2
result1b$top3
rm(list=ls())
cat("\014")
library(tidyverse)
require(softImpute)
setwd("~/Dropbox (MIT)/AOM/Pset 6")
set.seed(15780)
data  = read.csv("netflix_matrix.csv")
# Part 1
# we will give z_listo an id of 1000000
z_listo = c(1000000, rep(NA, 1701))
z_listo[which(colnames(data) == "NFL..Super.Bowl.XXXIX")] = 1
z_listo[which(colnames(data) == "Scooby.Doo.s.Spookiest.Tales")] = 5
z_listo[which(colnames(data) == "The.Phantom.of.the.Opera..Special.Edition")] = 2
z_listo[which(colnames(data) == "Streetball.Classics..Vol..1")] = 5
z_listo[which(colnames(data) == "Don.t.Try.This.at.Home..The.Steve.O.Video")] = 3
z_listo[which(colnames(data) == "Bullet")] = 4
z_listo[which(colnames(data) == "Futurama..Vol..1")] = 5
z_listo[which(colnames(data) == "Dragon.Ball.Z..Captain.Ginyu.Saga")] = 4
z_listo[which(colnames(data) == "The.Great.Mouse.Detective")] = 1
z_listo[which(colnames(data) == "Batman.Forever")] = 5
data_matrix = rbind(data[,-1], z_listo[-1])
data_matrix = as.matrix(data_matrix)
incomplete_data = as(data_matrix, "Incomplete")
res = softImpute(incomplete_data,rank.max=100,trace=FALSE,type="svd",lambda= 0)
# Complete the matrix
complete_data = complete(data_matrix,res,unscale=FALSE)
top3 = function(complete_data){
yhat_zlisto = tail(complete_data,1)
# Remove Z-Listo's ratings so that they don't appear in our results
yhat_zlisto = yhat_zlisto - replace(z_listo,is.na(z_listo),0)[-1]
yhat_zlisto[,which(colnames(data) == "Dragon.Ball.Z..Captain.Ginyu.Saga")-1]
top_rankings = sort(yhat_zlisto,decreasing = TRUE)
top1 = which(yhat_zlisto == top_rankings[1])
name1 = colnames(data_matrix)[top1]
top2 = which(yhat_zlisto == top_rankings[2])
name2 = colnames(data_matrix)[top2]
top3 = which(yhat_zlisto == top_rankings[3])
name3 = colnames(data_matrix)[top3]
return(list(name1 = name1, top1 = top_rankings[1], name2 = name2, top2 = top_rankings[2], name3 = name3, top3 = top_rankings[3]))
}
result1a = top3(complete_data)
result1a$name1
result1a$name1
result1a$name2
result1a$name3
result1a$top1
result1a$top2
result1a$top3
result1a$top1
result1a$top2
result1a$top3
result1a$name1
result1a$name2
result1a$name3
incomplete_data_scaled = biScale(incomplete_data,col.scale=FALSE,row.scale=FALSE, maxit = 100)
res2 = softImpute(incomplete_data_scaled,rank.max=100,trace=FALSE,type="svd",lambda= 0)
complete_data2 = complete(incomplete_data_scaled,res2,unscale=TRUE)
result1b = top3(complete_data2)
result1b$name1
result1b$name2
result1b$name3
result1b$top1
result1b$top2
result1b$top3
result1b$name1
result1b$name2
result1b$name3
result1b$top1
result1b$top2
result1b$top3
result1a$name1
result1a$name2
result1a$name3
result1a$top1
result1a$top2
result1a$top3
r1 = c(1,-1,1,-1)
r2 = c(-1,1,-1,1)
r3 = c(1,-1,1,1)
r4 = c(-1,1,-1,-1)
r5 = c(NA, -1,1,-1)
songs = t(matrix(c(r1, r2, r3,r4), nrow=4,  ncol=4))
songs
songs = t(matrix(c(r1, r2, r3, r4, r5), nrow=4,  ncol=4))
songs
songs = t(matrix(c(r1, r2, r3, r4, r5), nrow=5,  ncol=4))
songs
songs = t(matrix(c(r1, r2, r3, r4, r5), nrow=4,  ncol=5))
songs
dimnames(somgs) = list(
c( "User 1", "User 2","User 3","User 4","User 5"),
c("Hotline Bling", "Bad Blood", "Work","Bohemian Rhapsody"))
songs = matrix(c(r1, r2, r3, r4, r5), nrow=5,  ncol=4)
songs
dimnames(somgs) = list(
c( "User 1", "User 2","User 3","User 4","User 5"),
c("Hotline Bling", "Bad Blood", "Work","Bohemian Rhapsody"))
dimnames(songs) = list(
c( "User 1", "User 2","User 3","User 4","User 5"),
c("Hotline Bling", "Bad Blood", "Work","Bohemian Rhapsody"))
songs
songs = matrix(c(r1, r2, r3, r4, r5), nrow=4,  ncol=5)
dimnames(songs) = list(
c( "User 1", "User 2","User 3","User 4","User 5"),
c("Hotline Bling", "Bad Blood", "Work","Bohemian Rhapsody"))
c(r1, r2, r3, r4, r5)
songs = matrix(c(r1, r2, r3, r4, r5), nrow=4,  ncol=5)
songs
songs = matrix(c(r1, r2, r3, r4, r5), nrow=5,  ncol=4)
songs
r1 = c(1,-1,1,-1)
r2 = c(-1,1,-1,1)
r3 = c(1,-1,1,1)
r4 = c(-1,1,-1,-1)
r5 = c(NA, -1,1,-1)
songs = matrix(c(r1, r2, r3, r4, r5), nrow=5,  ncol=4)
rbind(r1,r2)
rbind(r1,r2) %>% rbind(.,r3)
songs = rbind(r1,r2) %>% rbind(.,r3) %>% rbind(.,r4) %>% rbind(.,r5)
songs
dimnames(songs) = list(
c( "User 1", "User 2","User 3","User 4","User 5"),
c("Hotline Bling", "Bad Blood", "Work","Bohemian Rhapsody"))
songs
songs = rbind(r1,r2) %>% rbind(.,r3) %>% rbind(.,r4) %>% rbind(.,r5) %>% dimnames() = list(
c( "User 1", "User 2","User 3","User 4","User 5"),
c("Hotline Bling", "Bad Blood", "Work","Bohemian Rhapsody"))
songs = rbind(r1,r2) %>% rbind(.,r3) %>% rbind(.,r4) %>% rbind(.,r5)
dimnames(songs) = list(
c( "User 1", "User 2","User 3","User 4","User 5"),
c("Hotline Bling", "Bad Blood", "Work","Bohemian Rhapsody"))
songs
cosine_similarity <- function(x, y){
return(sum(x*y) / (sqrt(sum(x*x)) * sqrt(sum(y*y))))
}
for (i in 1:(nrow(songs)-1)){
print(cosine_similarity(r5,songs[i,]))
}
c(1,2,3)[1:]
c(1,2,3)[1,]
c(1,2,3)[1]
c(1,2,3)[:1]
c(1,2,3)[(2:3)]
for (i in 1:(nrow(songs)-1)){
print(cosine_similarity(r5[1],songs[i,(2:)]))
for (i in 1:(nrow(songs)-1)){
print(cosine_similarity(r5[2:],songs[i,(2:)]))
print(cosine_similarity(r5[2:],songs[i,2:]))
for (i in 1:(nrow(songs)-1)){
print(cosine_similarity(r5,songs[i]))
}
print(cosine_similarity(r5[2:],songs[i,2:]))
songs
songs[1,]
songs[1,2:]
songs.matrix[1,2:]
songs[,1]
songs[1,2]
songs[2]
songs[2:]
songs[(2:)]
songs
songs[-1]
songs[,-1]
songs[1,-1]
r5
r5[-1]
for (i in 1:(nrow(songs)-1)){
print(cosine_similarity(r5[-1],songs[i,-1]))
}
for (i in 1:(nrow(songs)-1)){
user_similarity[i] = cosine_similarity(r5[-1],songs[i,-1])
}
user_similarity = rep(0,4)
for (i in 1:(nrow(songs)-1)){
user_similarity[i] = cosine_similarity(r5[-1],songs[i,-1])
}
user_similarity
knitr::kable(data.frame(c( "User 1", "User 2","User 3","User 4","User 5"), user_similarity),
caption = "Cosine similarity with user 6 by user")
knitr::kable(data.frame(c( "User 1", "User 2","User 3","User 4"), user_similarity),
caption = "Cosine similarity with user 6 by user")
df = data.frame(c( "User 1", "User 2","User 3","User 4"),user_similarity)
df
colnames(df) = c("User", "Cosine similarity")
df
knitr::kable(df, caption = "Cosine similarity with user 6 by user")
user_similarity
songs
songs[-1,1]
songs[1:3,1]
songs[1:4,1]
?ifelse
?sapply
Suv = ifelse(user_similarity<0,0,user_similarity)
Suv
user_similarity
songs[1:4,1]
yhat_user6 = Suv * songs[1:4,1]
yhat_user6
yhat_user6 = sum(Suv * songs[1:4,1])/sum(Suv)
yhat_user6
sum(sum(Suv * songs[1:4,1]))
songs[1:4,1]
library(tidyverse)
library(softImpute)
setwd("~/Dropbox (Personal)/MIT/Fall 2017/Analytics of Operations Management/Project/AOM-Project")
convert_pos = function(x){
if (x == 'C'){
return(5)
} else if (x == 'C-PF'){
return(4.75)
} else if (x == 'C-SF'){
return(4)
} else if (x == 'PF'){
return(4)
} else if (x == 'PF-C'){
return(4.25)
} else if (x == 'PF-SF'){
return(3.75)
} else if (x == 'PG'){
return(1)
} else if (x == 'PG-SF'){
return(2)
} else if (x == 'PG-SG'){
return(1.25)
} else if (x == 'SF'){
return(3)
} else if (x == 'SF-PF'){
return(3.25)
} else if (x == 'SF-SG'){
return(2.75)
} else if (x == 'SG'){
return(2)
} else if (x == 'SG-PF'){
return(3)
} else if (x == 'SG-PG'){
return(1.75)
} else if (x == 'SG-SF'){
return(2.25)
}
}
setwd("~/Dropbox (Personal)/MIT/Fall 2017/Analytics of Operations Management/Project/AOM-Project")
convert_pos = function(x){
if (x == 'C'){
return(5)
} else if (x == 'C-PF'){
return(4.75)
} else if (x == 'C-SF'){
return(4)
} else if (x == 'PF'){
return(4)
} else if (x == 'PF-C'){
return(4.25)
} else if (x == 'PF-SF'){
return(3.75)
} else if (x == 'PG'){
return(1)
} else if (x == 'PG-SF'){
return(2)
} else if (x == 'PG-SG'){
return(1.25)
} else if (x == 'SF'){
return(3)
} else if (x == 'SF-PF'){
return(3.25)
} else if (x == 'SF-SG'){
return(2.75)
} else if (x == 'SG'){
return(2)
} else if (x == 'SG-PF'){
return(3)
} else if (x == 'SG-PG'){
return(1.75)
} else if (x == 'SG-SF'){
return(2.25)
}
}
df = read.csv("Combined Data.csv")
df2 = df %>%
mutate(PosNum = sapply(df$Pos, convert_pos)) %>%
filter(MP >= 500)
df_cluster = df2 %>%
select(-Player, -MP, -Year, -X,-Rk,-Pos, -PosNum, -Age,-Tm,-G,-GS, -X3P., -FG., -FG, -FGA, -FT., -PTS) %>%
biScale()
clusters = kmeans(df_cluster,5)
clusters
clusters$betweenss/clusters$totss
df2 = df2 %>%
mutate(cluster = factor(clusters$cluster))
cluster_fit_curve = function(x){
result = rep(0,x)
for (i in 1:x){
clus = kmeans(df_cluster,i)
result[i] = clus$betweenss/clus$totss
}
plot(result)
}
cluster_fit_curve(10)
df2 %>%
ggplot() +
aes(x = cluster, y = PosNum) +
geom_boxplot() +
theme_bw()
df2 %>%
ggplot() +
aes(x = X3PA, y = X2PA, color = cluster) +
geom_point() +
theme_bw()
df2 %>%
ggplot() +
aes(x = cluster, y = TRB) +
geom_boxplot() +
theme_bw()
df2 %>%
ggplot() +
aes(x = cluster, y = AST) +
geom_boxplot() +
theme_bw()
df2 %>%
ggplot() +
aes(x = cluster, y = STL) +
geom_boxplot() +
theme_bw()
df2 %>%
ggplot() +
aes(x = cluster, y = BLK) +
geom_boxplot() +
theme_bw()
df2 %>%
ggplot() +
aes(x = cluster, y = TOV) +
geom_boxplot() +
theme_bw()
df2 %>%
ggplot() +
aes(x = cluster, y = PF) +
geom_boxplot() +
theme_bw()
df2 %>%
ggplot() +
aes(x = X3PA, y = X2PA, color = cluster) +
geom_point() +
theme_bw()
df_cluster = df2 %>%
select(-Player, -MP, -Year, -X,-Rk,-Pos, -PosNum, -Age,-Tm,-G,-GS, -X3P., -FG., -FG, -FGA, -FT., -PTS) %>%
biScale()
cluster_fit_curve(10)
